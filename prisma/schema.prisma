generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  username         String            @unique
  email            String            @unique
  emailVerified    DateTime?
  password         String
  profileImage     String?
  role             Role              @default(USER)
  channels         Channel[]
  subscriptions    Subscription[]
  comments         Comment[]
  videoEngagements VideoEngagement[]
  videoViews       VideoView[]
}

enum Role {
  USER
  ADMIN
}

// Channel Model
model Channel {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  thumbnail   String?
  description String?
  ownerId     Int            
  owner       User           @relation(fields: [ownerId], references: [id])
  subscribers Subscription[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime
}

// Video Model
model Video {
  id               Int               @id @default(autoincrement())
  title            String
  thumbnail        String?
  video            String
  comments         Comment[]
  videoEngagements VideoEngagement[]
  videoViews       VideoView[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
}

// Comment Model
model Comment {
  id        Int       @id @default(autoincrement())
  text      String
  likes     Int       @default(0)
  dislikes  Int       @default(0)
  videoId   Int
  video     Video     @relation(fields: [videoId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[] @relation("Reply")
  commentId Int?
  comment   Comment?  @relation("Reply", fields: [commentId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime
}

// Subscription Model
model Subscription {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  subscriberId   Int
  subscriber     User     @relation(fields: [subscriberId], references: [id])
  subscribedToId Int
  Channel        Channel? @relation(fields: [channelId], references: [id])
  channelId      Int?
}

// Video Engagement Model
model VideoEngagement {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  videoId   Int
  video     Video    @relation(fields: [videoId], references: [id])
  like      Boolean  @default(false)
  dislike   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

// Video View Model
model VideoView {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  videoId   Int
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime
}